
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ADDASS ALIAS AND ANDLOG ASS BREAK CASE CLASS CLASSVAR CONSTANTS DEF DEFINED DIV DIVASS DO ELSE ELSIF END ENSURE EQUAL ERROR EXP EXPASS FALSE FILE FOR GLOBAL GREATHER GREATHEREQ IF IN INSTANCEVAR LINE LOCAL LOWER LOWEREQ MOD MODASS MODULE MUL MULASS NEXT NIL NOT NOTEQ NOTLOG NUMBER OR ORLOG PSEUDO REDO RESCUE RETRY RETURN SELF STRING SUB SUBASS SUPER THEN TRUE UNDEF UNLESS UNTIL WHEN WHILE YIELDassign : variable ASS expr\n              | variable ASS sexprmath : term arith term\n            | term arith math\n            | variable asig termvariable : LOCAL\n                | GLOBAL \n                | CONSTANTS \n                | INSTANCEVAR \n                | CLASSVARasig : ASS\n            | ADDASS\n            | SUBASS\n            | MULASS\n            | DIVASS\n            | MODASS\n            | EXPASSexpr :  expr arith term\n             | term\n             | variablesexpr : sterm MUL term\n             | sterm ADD sexpr\n             | stermterm : NUMBERsterm : STRINGarith : EXP\n             | MUL\n             | DIV\n             | MOD\n             | ADD\n             | SUBlogic : variable comparison variable\n             | variable EQUAL FALSE\n             | variable EQUAL TRUE\n             | variable comparison term\n             | variable comparison sterm\n             | logic logcompare logiccomparison : EQUAL\n                  | NOTEQ\n                  | GREATHER\n                  | LOWER\n                  | GREATHEREQ\n                  | LOWEREQlogcompare : ANDLOG\n                  | ORLOG\n                  | NOTLOG\n                  | AND\n                  | OR\n                  | NOT'
    
_lr_action_items = {'LOCAL':([0,8,],[3,3,]),'GLOBAL':([0,8,],[4,4,]),'CONSTANTS':([0,8,],[5,5,]),'INSTANCEVAR':([0,8,],[6,6,]),'CLASSVAR':([0,8,],[7,7,]),'$end':([1,3,4,5,6,7,9,10,11,12,13,14,15,25,26,27,],[0,-6,-7,-8,-9,-10,-20,-1,-2,-19,-23,-24,-25,-18,-21,-22,]),'ASS':([2,3,4,5,6,7,],[8,-6,-7,-8,-9,-10,]),'EXP':([3,4,5,6,7,9,10,12,14,25,],[-6,-7,-8,-9,-10,-20,17,-19,-24,-18,]),'MUL':([3,4,5,6,7,9,10,12,13,14,15,25,],[-6,-7,-8,-9,-10,-20,18,-19,23,-24,-25,-18,]),'DIV':([3,4,5,6,7,9,10,12,14,25,],[-6,-7,-8,-9,-10,-20,19,-19,-24,-18,]),'MOD':([3,4,5,6,7,9,10,12,14,25,],[-6,-7,-8,-9,-10,-20,20,-19,-24,-18,]),'ADD':([3,4,5,6,7,9,10,12,13,14,15,25,],[-6,-7,-8,-9,-10,-20,21,-19,24,-24,-25,-18,]),'SUB':([3,4,5,6,7,9,10,12,14,25,],[-6,-7,-8,-9,-10,-20,22,-19,-24,-18,]),'NUMBER':([8,16,17,18,19,20,21,22,23,],[14,14,-26,-27,-28,-29,-30,-31,14,]),'STRING':([8,24,],[15,15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assign':([0,],[1,]),'variable':([0,8,],[2,9,]),'expr':([8,],[10,]),'sexpr':([8,24,],[11,27,]),'term':([8,16,23,],[12,25,26,]),'sterm':([8,24,],[13,13,]),'arith':([10,],[16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> assign","S'",1,None,None,None),
  ('assign -> variable ASS expr','assign',3,'p_assign','gramarRuby.py',9),
  ('assign -> variable ASS sexpr','assign',3,'p_assign','gramarRuby.py',10),
  ('math -> term arith term','math',3,'p_math','gramarRuby.py',13),
  ('math -> term arith math','math',3,'p_math','gramarRuby.py',14),
  ('math -> variable asig term','math',3,'p_math','gramarRuby.py',15),
  ('variable -> LOCAL','variable',1,'p_variable','gramarRuby.py',18),
  ('variable -> GLOBAL','variable',1,'p_variable','gramarRuby.py',19),
  ('variable -> CONSTANTS','variable',1,'p_variable','gramarRuby.py',20),
  ('variable -> INSTANCEVAR','variable',1,'p_variable','gramarRuby.py',21),
  ('variable -> CLASSVAR','variable',1,'p_variable','gramarRuby.py',22),
  ('asig -> ASS','asig',1,'p_asig','gramarRuby.py',25),
  ('asig -> ADDASS','asig',1,'p_asig','gramarRuby.py',26),
  ('asig -> SUBASS','asig',1,'p_asig','gramarRuby.py',27),
  ('asig -> MULASS','asig',1,'p_asig','gramarRuby.py',28),
  ('asig -> DIVASS','asig',1,'p_asig','gramarRuby.py',29),
  ('asig -> MODASS','asig',1,'p_asig','gramarRuby.py',30),
  ('asig -> EXPASS','asig',1,'p_asig','gramarRuby.py',31),
  ('expr -> expr arith term','expr',3,'p_expr','gramarRuby.py',34),
  ('expr -> term','expr',1,'p_expr','gramarRuby.py',35),
  ('expr -> variable','expr',1,'p_expr','gramarRuby.py',36),
  ('sexpr -> sterm MUL term','sexpr',3,'p_sexpr','gramarRuby.py',39),
  ('sexpr -> sterm ADD sexpr','sexpr',3,'p_sexpr','gramarRuby.py',40),
  ('sexpr -> sterm','sexpr',1,'p_sexpr','gramarRuby.py',41),
  ('term -> NUMBER','term',1,'p_term','gramarRuby.py',44),
  ('sterm -> STRING','sterm',1,'p_sterm','gramarRuby.py',47),
  ('arith -> EXP','arith',1,'p_arith','gramarRuby.py',50),
  ('arith -> MUL','arith',1,'p_arith','gramarRuby.py',51),
  ('arith -> DIV','arith',1,'p_arith','gramarRuby.py',52),
  ('arith -> MOD','arith',1,'p_arith','gramarRuby.py',53),
  ('arith -> ADD','arith',1,'p_arith','gramarRuby.py',54),
  ('arith -> SUB','arith',1,'p_arith','gramarRuby.py',55),
  ('logic -> variable comparison variable','logic',3,'p_logic','gramarRuby.py',58),
  ('logic -> variable EQUAL FALSE','logic',3,'p_logic','gramarRuby.py',59),
  ('logic -> variable EQUAL TRUE','logic',3,'p_logic','gramarRuby.py',60),
  ('logic -> variable comparison term','logic',3,'p_logic','gramarRuby.py',61),
  ('logic -> variable comparison sterm','logic',3,'p_logic','gramarRuby.py',62),
  ('logic -> logic logcompare logic','logic',3,'p_logic','gramarRuby.py',63),
  ('comparison -> EQUAL','comparison',1,'p_comparison','gramarRuby.py',66),
  ('comparison -> NOTEQ','comparison',1,'p_comparison','gramarRuby.py',67),
  ('comparison -> GREATHER','comparison',1,'p_comparison','gramarRuby.py',68),
  ('comparison -> LOWER','comparison',1,'p_comparison','gramarRuby.py',69),
  ('comparison -> GREATHEREQ','comparison',1,'p_comparison','gramarRuby.py',70),
  ('comparison -> LOWEREQ','comparison',1,'p_comparison','gramarRuby.py',71),
  ('logcompare -> ANDLOG','logcompare',1,'p_logcompare','gramarRuby.py',74),
  ('logcompare -> ORLOG','logcompare',1,'p_logcompare','gramarRuby.py',75),
  ('logcompare -> NOTLOG','logcompare',1,'p_logcompare','gramarRuby.py',76),
  ('logcompare -> AND','logcompare',1,'p_logcompare','gramarRuby.py',77),
  ('logcompare -> OR','logcompare',1,'p_logcompare','gramarRuby.py',78),
  ('logcompare -> NOT','logcompare',1,'p_logcompare','gramarRuby.py',79),
]
