
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ADDASS ALIAS AND ANDLOG ASS BEGIN BREAK CASE CLASS CLASSVAR COMA CONSTANTS DEF DEFINED DIV DIVASS DO DOBLEPOINT DOUBLESECUENCEPOINT ELSE ELSIF END ENSURE EQUAL ERROR EXP EXPASS FALSE FILE FLOAT FOR GLOBAL GREATHER GREATHEREQ IF IN INSTANCEVAR INT LBRACK LINE LOCAL LOWER LOWEREQ MOD MODASS MODULE MUL MULASS NEWLINE NEXT NIL NOT NOTEQ NOTLOG NUMBER OR ORLOG PSEUDO RBRACK REDO RESCUE RETRY RETURN SELF STRING SUB SUBASS SUPER THEN TRUE UNDEF UNLESS UNTIL WHEN WHILE YIELDcode : expr\n            | if\n            | while\n            | expresiones\n            | for\n            | assign\n            | code codewhile : WHILE logical code END\n             | WHILE logical DO salto code salto END\n             | WHILE logical DOBLEPOINT salto code salto END\n             | BEGIN code END WHILE logicallogical : term comparison term\n               | term comparison logical\n               | variable comparison term\n               | variable comparison boolean\n               | logical logcompare logical\n               | booleancomparison : EQUAL\n                  | NOTEQ\n                  | GREATHER\n                  | LOWER\n                  | GREATHEREQ\n                  | LOWEREQlogcompare : ANDLOG\n                  | ORLOG\n                  | NOTLOG\n                  | AND\n                  | OR\n                  | NOTassign : variable ASS expr\n              | variable ASS sexpr\n              | variable ASS arraymath : term arith term\n            | term arith math\n            | variable asig termvariable : LOCAL\n                | GLOBAL \n                | CONSTANTS \n                | INSTANCEVAR \n                | CLASSVARasig : ASS\n            | ADDASS\n            | SUBASS\n            | MULASS\n            | DIVASS\n            | MODASS\n            | EXPASSexpr :  math\n             | term\n             | sterm\n             | variable\n             | slice\n             | indexsexpr : sterm MUL term\n             | sterm ADD sexprterm : NUMBERsterm : STRINGarith : EXP\n             | MUL\n             | DIV\n             | MOD\n             | ADD\n             | SUBfor : FOR iterador IN expresiones code END\n           | FOR iterador IN expresiones DO code END\n           | FOR iterador IN array code END\n           | FOR iterador IN array DO code ENDsalto : NEWLINE if : IF logical expr END\n          | IF logical THEN expr END\n          | IF logical\n          | IF logical THEN\n          | if else\n          | if elsif ENDelse : ELSE code ENDelsif : ELSIF logical finalfinal : code\n             | THEN code\n             | code else\n             | code elsif iterador : variable\n                | variable COMA variableexpresiones : term DOUBLESECUENCEPOINT termarray : LBRACK defarray RBRACKdefarray : NUMBER \n                | NUMBER COMA defarray\n                | STRING\n                | STRING COMA defarray\n                | INT\n                | INT COMA defarray\n                | FLOAT\n                | FLOAT COMA defarray\n                | boolean\n                | boolean COMA defarrayindex : variable LBRACK INT RBRACKslice : variable LBRACK defslice RBRACKdefslice : INT DOBLEPOINT INT\n                    | INT DOBLEPOINT\n                    | DOBLEPOINT INTboolean : TRUE\n                | FALSE\n    '
    
_lr_action_items = {'LOWEREQ':([2,5,7,10,16,17,38,39,115,],[-37,-40,-38,-39,-36,-56,72,72,72,]),'ASS':([2,5,6,7,10,16,65,90,],[-37,-40,31,-38,-39,-36,108,108,]),'LBRACK':([2,5,6,7,10,16,31,65,93,],[-37,-40,34,-38,-39,-36,62,34,62,]),'INT':([34,62,69,112,134,136,137,138,139,],[68,102,113,143,102,102,102,102,102,]),'GLOBAL':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,40,41,42,43,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,63,64,65,66,67,71,72,73,74,75,76,77,79,80,81,82,84,85,86,87,88,89,91,92,97,99,100,101,111,114,115,116,117,118,119,121,124,125,126,127,128,129,130,131,135,140,141,144,145,146,147,148,149,150,151,157,158,159,160,163,164,165,166,],[2,-52,-37,-2,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,2,-49,-36,-56,-5,2,2,-3,-57,2,2,2,2,-73,2,2,-100,-17,-101,-59,-61,-58,-63,-62,2,-60,2,2,2,2,-74,2,-35,-49,-31,-30,-51,-32,-50,2,-23,-20,-19,-22,-21,-18,-27,2,-24,2,-28,-25,-29,-26,-83,-33,-34,2,2,2,2,-75,-95,-96,-12,-13,-14,-15,-16,-69,2,2,2,2,-68,2,-8,2,-84,-54,-55,-70,2,2,2,2,-11,2,2,2,-64,2,-66,-65,-67,-9,-10,]),'MOD':([15,17,61,89,],[46,-56,46,46,]),'DO':([17,41,42,43,56,88,115,116,117,118,119,124,125,135,],[-56,-100,-17,-101,95,-83,-12,-13,-14,-15,-16,145,147,-84,]),'TRUE':([14,24,25,62,71,72,73,74,75,76,77,78,79,80,81,84,85,86,87,126,134,136,137,138,139,],[41,41,41,41,41,-23,-20,-19,-22,-21,-18,41,-27,41,-24,-28,-25,-29,-26,41,41,41,41,41,41,]),'THEN':([17,40,41,42,43,57,115,116,117,118,119,],[-56,82,-100,-17,-101,99,-12,-13,-14,-15,-16,]),'NOTLOG':([17,40,41,42,43,56,57,115,116,117,118,119,149,],[-56,87,-100,-17,-101,87,87,-12,87,-14,-15,87,87,]),'AND':([17,40,41,42,43,56,57,115,116,117,118,119,149,],[-56,79,-100,-17,-101,79,79,-12,79,-14,-15,79,79,]),'CLASSVAR':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,40,41,42,43,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,63,64,65,66,67,71,72,73,74,75,76,77,79,80,81,82,84,85,86,87,88,89,91,92,97,99,100,101,111,114,115,116,117,118,119,121,124,125,126,127,128,129,130,131,135,140,141,144,145,146,147,148,149,150,151,157,158,159,160,163,164,165,166,],[5,-52,-37,-2,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,5,-49,-36,-56,-5,5,5,-3,-57,5,5,5,5,-73,5,5,-100,-17,-101,-59,-61,-58,-63,-62,5,-60,5,5,5,5,-74,5,-35,-49,-31,-30,-51,-32,-50,5,-23,-20,-19,-22,-21,-18,-27,5,-24,5,-28,-25,-29,-26,-83,-33,-34,5,5,5,5,-75,-95,-96,-12,-13,-14,-15,-16,-69,5,5,5,5,-68,5,-8,5,-84,-54,-55,-70,5,5,5,5,-11,5,5,5,-64,5,-66,-65,-67,-9,-10,]),'LOWER':([2,5,7,10,16,17,38,39,115,],[-37,-40,-38,-39,-36,-56,76,76,76,]),'DOUBLESECUENCEPOINT':([15,17,123,],[44,-56,44,]),'MUL':([15,17,22,61,67,89,142,],[45,-56,-57,45,109,45,109,]),'OR':([17,40,41,42,43,56,57,115,116,117,118,119,149,],[-56,84,-100,-17,-101,84,84,-12,84,-14,-15,84,84,]),'SUBASS':([2,5,6,7,10,16,65,90,],[-37,-40,37,-38,-39,-36,37,37,]),'NEWLINE':([1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,21,22,28,40,41,42,43,55,58,60,61,63,64,65,66,67,82,88,89,91,95,96,101,111,114,115,116,117,118,119,121,130,135,140,141,144,149,150,151,158,160,163,164,165,166,],[-52,-37,-2,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,-49,-36,-56,-5,-3,-57,-73,-71,-100,-17,-101,-7,-74,-35,-49,-31,-30,-51,-32,-50,-72,-83,-33,-34,128,128,-75,-95,-96,-12,-13,-14,-15,-16,-69,-8,-84,-54,-55,-70,-11,128,128,-64,-66,-65,-67,-9,-10,]),'FLOAT':([62,134,136,137,138,139,],[106,106,106,106,106,106,]),'DIV':([15,17,61,89,],[51,-56,51,51,]),'EQUAL':([2,5,7,10,16,17,38,39,115,],[-37,-40,-38,-39,-36,-56,77,77,77,]),'INSTANCEVAR':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,40,41,42,43,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,63,64,65,66,67,71,72,73,74,75,76,77,79,80,81,82,84,85,86,87,88,89,91,92,97,99,100,101,111,114,115,116,117,118,119,121,124,125,126,127,128,129,130,131,135,140,141,144,145,146,147,148,149,150,151,157,158,159,160,163,164,165,166,],[10,-52,-37,-2,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,10,-49,-36,-56,-5,10,10,-3,-57,10,10,10,10,-73,10,10,-100,-17,-101,-59,-61,-58,-63,-62,10,-60,10,10,10,10,-74,10,-35,-49,-31,-30,-51,-32,-50,10,-23,-20,-19,-22,-21,-18,-27,10,-24,10,-28,-25,-29,-26,-83,-33,-34,10,10,10,10,-75,-95,-96,-12,-13,-14,-15,-16,-69,10,10,10,10,-68,10,-8,10,-84,-54,-55,-70,10,10,10,10,-11,10,10,10,-64,10,-66,-65,-67,-9,-10,]),'ANDLOG':([17,40,41,42,43,56,57,115,116,117,118,119,149,],[-56,81,-100,-17,-101,81,81,-12,81,-14,-15,81,81,]),'GREATHER':([2,5,7,10,16,17,38,39,115,],[-37,-40,-38,-39,-36,-56,73,73,73,]),'SUB':([15,17,61,89,],[48,-56,48,48,]),'FOR':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,20,21,22,23,27,28,40,41,42,43,54,55,56,57,58,59,60,61,63,64,65,66,67,82,88,89,91,97,99,100,101,111,114,115,116,117,118,119,121,124,125,127,128,129,130,131,135,140,141,144,145,146,147,148,149,150,151,157,158,159,160,163,164,165,166,],[19,-52,-37,-2,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,-49,-36,-56,-5,19,-3,-57,19,19,-73,-71,-100,-17,-101,19,19,19,19,-74,19,-35,-49,-31,-30,-51,-32,-50,-72,-83,-33,-34,19,19,19,-75,-95,-96,-12,-13,-14,-15,-16,-69,19,19,19,-68,19,-8,19,-84,-54,-55,-70,19,19,19,19,-11,19,19,19,-64,19,-66,-65,-67,-9,-10,]),'IF':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,20,21,22,23,27,28,40,41,42,43,54,55,56,57,58,59,60,61,63,64,65,66,67,82,88,89,91,97,99,100,101,111,114,115,116,117,118,119,121,124,125,127,128,129,130,131,135,140,141,144,145,146,147,148,149,150,151,157,158,159,160,163,164,165,166,],[14,-52,-37,-2,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,-49,-36,-56,-5,14,-3,-57,14,14,-73,-71,-100,-17,-101,14,14,14,14,-74,14,-35,-49,-31,-30,-51,-32,-50,-72,-83,-33,-34,14,14,14,-75,-95,-96,-12,-13,-14,-15,-16,-69,14,14,14,-68,14,-8,14,-84,-54,-55,-70,14,14,14,14,-11,14,14,14,-64,14,-66,-65,-67,-9,-10,]),'END':([1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,21,22,26,28,40,41,42,43,54,55,58,59,60,61,63,64,65,66,67,82,83,88,89,91,97,98,100,101,111,114,115,116,117,118,119,120,121,128,130,131,132,133,135,140,141,144,146,148,149,157,158,159,160,161,162,163,164,165,166,],[-52,-37,-2,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,-49,-36,-56,-5,-3,-57,58,-73,-71,-100,-17,-101,94,-7,-74,101,-35,-49,-31,-30,-51,-32,-50,-72,121,-83,-33,-34,130,-76,-77,-75,-95,-96,-12,-13,-14,-15,-16,144,-69,-68,-8,-78,-79,-80,-84,-54,-55,-70,158,160,-11,163,-64,164,-66,165,166,-65,-67,-9,-10,]),'DIVASS':([2,5,6,7,10,16,65,90,],[-37,-40,29,-38,-39,-36,29,29,]),'IN':([2,5,7,10,16,52,53,122,],[-37,-40,-38,-39,-36,-81,93,-82,]),'RBRACK':([41,43,68,70,102,103,104,105,106,107,112,113,143,152,153,154,155,156,],[-100,-101,111,114,-89,135,-93,-85,-91,-87,-98,-99,-97,-90,-94,-86,-92,-88,]),'LOCAL':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,40,41,42,43,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,63,64,65,66,67,71,72,73,74,75,76,77,79,80,81,82,84,85,86,87,88,89,91,92,97,99,100,101,111,114,115,116,117,118,119,121,124,125,126,127,128,129,130,131,135,140,141,144,145,146,147,148,149,150,151,157,158,159,160,163,164,165,166,],[16,-52,-37,-2,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,16,-49,-36,-56,-5,16,16,-3,-57,16,16,16,16,-73,16,16,-100,-17,-101,-59,-61,-58,-63,-62,16,-60,16,16,16,16,-74,16,-35,-49,-31,-30,-51,-32,-50,16,-23,-20,-19,-22,-21,-18,-27,16,-24,16,-28,-25,-29,-26,-83,-33,-34,16,16,16,16,-75,-95,-96,-12,-13,-14,-15,-16,-69,16,16,16,16,-68,16,-8,16,-84,-54,-55,-70,16,16,16,16,-11,16,16,16,-64,16,-66,-65,-67,-9,-10,]),'EXPASS':([2,5,6,7,10,16,65,90,],[-37,-40,33,-38,-39,-36,33,33,]),'ELSIF':([1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,21,22,28,40,41,42,43,55,58,60,61,63,64,65,66,67,82,88,89,91,100,101,111,114,115,116,117,118,119,121,130,135,140,141,144,149,158,160,163,164,165,166,],[-52,-37,25,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,-49,-36,-56,-5,-3,-57,-73,-71,-100,-17,-101,-7,-74,-35,-49,-31,-30,-51,-32,-50,-72,-83,-33,-34,25,-75,-95,-96,-12,-13,-14,-15,-16,-69,-8,-84,-54,-55,-70,-11,-64,-66,-65,-67,-9,-10,]),'ADDASS':([2,5,6,7,10,16,65,90,],[-37,-40,35,-38,-39,-36,35,35,]),'NUMBER':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,27,28,29,30,31,32,33,35,36,37,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,91,93,97,99,100,101,108,109,111,114,115,116,117,118,119,121,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,144,145,146,147,148,149,150,151,157,158,159,160,163,164,165,166,],[17,-52,-37,-2,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,17,-49,-36,-56,-5,17,-3,-57,17,17,17,17,-73,-45,17,17,-46,-47,-42,-44,-43,17,-100,-17,-101,17,-59,-61,-58,-63,-62,17,-60,17,17,17,17,-74,17,-35,-49,105,-31,-30,-51,-32,-50,17,-23,-20,-19,-22,-21,-18,17,-27,17,-24,17,-28,-25,-29,-26,-83,-33,-34,17,17,17,17,-75,-41,17,-95,-96,-12,-13,-14,-15,-16,-69,17,17,17,17,-68,17,-8,17,105,-84,105,105,105,105,-54,-55,-70,17,17,17,17,-11,17,17,17,-64,17,-66,-65,-67,-9,-10,]),'ADD':([15,17,22,61,67,89,142,],[49,-56,-57,49,110,49,110,]),'ORLOG':([17,40,41,42,43,56,57,115,116,117,118,119,149,],[-56,85,-100,-17,-101,85,85,-12,85,-14,-15,85,85,]),'STRING':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,20,21,22,23,27,28,31,40,41,42,43,54,55,56,57,58,59,60,61,62,63,64,65,66,67,82,88,89,91,97,99,100,101,110,111,114,115,116,117,118,119,121,124,125,127,128,129,130,131,134,135,136,137,138,139,140,141,144,145,146,147,148,149,150,151,157,158,159,160,163,164,165,166,],[22,-52,-37,-2,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,-49,-36,-56,-5,22,-3,-57,22,22,-73,22,22,-100,-17,-101,22,22,22,22,-74,22,-35,-49,107,-31,-30,-51,-32,-50,22,-83,-33,-34,22,22,22,-75,22,-95,-96,-12,-13,-14,-15,-16,-69,22,22,22,-68,22,-8,22,107,-84,107,107,107,107,-54,-55,-70,22,22,22,22,-11,22,22,22,-64,22,-66,-65,-67,-9,-10,]),'CONSTANTS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,40,41,42,43,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,63,64,65,66,67,71,72,73,74,75,76,77,79,80,81,82,84,85,86,87,88,89,91,92,97,99,100,101,111,114,115,116,117,118,119,121,124,125,126,127,128,129,130,131,135,140,141,144,145,146,147,148,149,150,151,157,158,159,160,163,164,165,166,],[7,-52,-37,-2,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,7,-49,-36,-56,-5,7,7,-3,-57,7,7,7,7,-73,7,7,-100,-17,-101,-59,-61,-58,-63,-62,7,-60,7,7,7,7,-74,7,-35,-49,-31,-30,-51,-32,-50,7,-23,-20,-19,-22,-21,-18,-27,7,-24,7,-28,-25,-29,-26,-83,-33,-34,7,7,7,7,-75,-95,-96,-12,-13,-14,-15,-16,-69,7,7,7,7,-68,7,-8,7,-84,-54,-55,-70,7,7,7,7,-11,7,7,7,-64,7,-66,-65,-67,-9,-10,]),'NOT':([17,40,41,42,43,56,57,115,116,117,118,119,149,],[-56,86,-100,-17,-101,86,86,-12,86,-14,-15,86,86,]),'EXP':([15,17,61,89,],[47,-56,47,47,]),'BEGIN':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,20,21,22,23,27,28,40,41,42,43,54,55,56,57,58,59,60,61,63,64,65,66,67,82,88,89,91,97,99,100,101,111,114,115,116,117,118,119,121,124,125,127,128,129,130,131,135,140,141,144,145,146,147,148,149,150,151,157,158,159,160,163,164,165,166,],[20,-52,-37,-2,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,-49,-36,-56,-5,20,-3,-57,20,20,-73,-71,-100,-17,-101,20,20,20,20,-74,20,-35,-49,-31,-30,-51,-32,-50,-72,-83,-33,-34,20,20,20,-75,-95,-96,-12,-13,-14,-15,-16,-69,20,20,20,-68,20,-8,20,-84,-54,-55,-70,20,20,20,20,-11,20,20,20,-64,20,-66,-65,-67,-9,-10,]),'MODASS':([2,5,6,7,10,16,65,90,],[-37,-40,32,-38,-39,-36,32,32,]),'DOBLEPOINT':([17,34,41,42,43,56,68,115,116,117,118,119,],[-56,69,-100,-17,-101,96,112,-12,-13,-14,-15,-16,]),'ELSE':([1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,21,22,28,40,41,42,43,55,58,60,61,63,64,65,66,67,82,88,89,91,100,101,111,114,115,116,117,118,119,121,130,135,140,141,144,149,158,160,163,164,165,166,],[-52,-37,27,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,-49,-36,-56,-5,-3,-57,-73,-71,-100,-17,-101,-7,-74,-35,-49,-31,-30,-51,-32,-50,-72,-83,-33,-34,27,-75,-95,-96,-12,-13,-14,-15,-16,-69,-8,-84,-54,-55,-70,-11,-64,-66,-65,-67,-9,-10,]),'GREATHEREQ':([2,5,7,10,16,17,38,39,115,],[-37,-40,-38,-39,-36,-56,75,75,75,]),'FALSE':([14,24,25,62,71,72,73,74,75,76,77,78,79,80,81,84,85,86,87,126,134,136,137,138,139,],[43,43,43,43,43,-23,-20,-19,-22,-21,-18,43,-27,43,-24,-28,-25,-29,-26,43,43,43,43,43,43,]),'NOTEQ':([2,5,7,10,16,17,38,39,115,],[-37,-40,-38,-39,-36,-56,74,74,74,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,21,22,23,28,40,41,42,43,55,58,60,61,63,64,65,66,67,82,88,89,91,101,111,114,115,116,117,118,119,121,130,135,140,141,144,149,158,160,163,164,165,166,],[-52,-37,-2,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,-49,-36,-56,-5,-3,-57,0,-73,-71,-100,-17,-101,-7,-74,-35,-49,-31,-30,-51,-32,-50,-72,-83,-33,-34,-75,-95,-96,-12,-13,-14,-15,-16,-69,-8,-84,-54,-55,-70,-11,-64,-66,-65,-67,-9,-10,]),'COMA':([2,5,7,10,16,41,43,52,102,104,105,106,107,],[-37,-40,-38,-39,-36,-100,-101,92,134,136,137,138,139,]),'MULASS':([2,5,6,7,10,16,65,90,],[-37,-40,36,-38,-39,-36,36,36,]),'WHILE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,20,21,22,23,27,28,40,41,42,43,54,55,56,57,58,59,60,61,63,64,65,66,67,82,88,89,91,94,97,99,100,101,111,114,115,116,117,118,119,121,124,125,127,128,129,130,131,135,140,141,144,145,146,147,148,149,150,151,157,158,159,160,163,164,165,166,],[24,-52,-37,-2,-1,-40,-51,-38,-4,-53,-39,-48,-6,-50,-49,-36,-56,-5,24,-3,-57,24,24,-73,-71,-100,-17,-101,24,24,24,24,-74,24,-35,-49,-31,-30,-51,-32,-50,-72,-83,-33,-34,126,24,24,24,-75,-95,-96,-12,-13,-14,-15,-16,-69,24,24,24,-68,24,-8,24,-84,-54,-55,-70,24,24,24,24,-11,24,24,24,-64,24,-66,-65,-67,-9,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr':([0,20,23,27,31,40,54,55,56,57,59,82,97,99,100,124,125,127,129,131,145,146,147,148,150,151,157,159,],[4,4,4,4,64,83,4,4,4,4,4,120,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'term':([0,14,20,23,24,25,27,30,31,40,44,50,54,55,56,57,59,71,78,80,82,93,97,99,100,109,124,125,126,127,129,131,145,146,147,148,150,151,157,159,],[15,38,15,15,38,38,15,60,61,61,88,89,15,15,15,15,15,115,117,38,61,123,15,15,15,140,15,15,38,15,15,15,15,15,15,15,15,15,15,15,]),'slice':([0,20,23,27,31,40,54,55,56,57,59,82,97,99,100,124,125,127,129,131,145,146,147,148,150,151,157,159,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'sexpr':([31,110,],[63,141,]),'salto':([95,96,150,151,],[127,129,161,162,]),'final':([57,],[98,]),'boolean':([14,24,25,62,71,78,80,126,134,136,137,138,139,],[42,42,42,104,42,118,42,42,104,104,104,104,104,]),'else':([3,100,],[28,132,]),'if':([0,20,23,27,54,55,56,57,59,97,99,100,124,125,127,129,131,145,146,147,148,150,151,157,159,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'logcompare':([40,56,57,116,119,149,],[80,80,80,80,80,80,]),'for':([0,20,23,27,54,55,56,57,59,97,99,100,124,125,127,129,131,145,146,147,148,150,151,157,159,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'logical':([14,24,25,71,80,126,],[40,56,57,116,119,149,]),'defslice':([34,],[70,]),'variable':([0,14,19,20,23,24,25,27,31,40,50,54,55,56,57,59,71,80,82,92,97,99,100,124,125,126,127,129,131,145,146,147,148,150,151,157,159,],[6,39,52,6,6,39,39,6,65,65,90,6,6,6,6,6,39,39,65,122,6,6,6,6,6,39,6,6,6,6,6,6,6,6,6,6,6,]),'asig':([6,65,90,],[30,30,30,]),'expresiones':([0,20,23,27,54,55,56,57,59,93,97,99,100,124,125,127,129,131,145,146,147,148,150,151,157,159,],[8,8,8,8,8,8,8,8,8,124,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'index':([0,20,23,27,31,40,54,55,56,57,59,82,97,99,100,124,125,127,129,131,145,146,147,148,150,151,157,159,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'array':([31,93,],[66,125,]),'arith':([15,61,89,],[50,50,50,]),'while':([0,20,23,27,54,55,56,57,59,97,99,100,124,125,127,129,131,145,146,147,148,150,151,157,159,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'comparison':([38,39,115,],[71,78,71,]),'code':([0,20,23,27,54,55,56,57,59,97,99,100,124,125,127,129,131,145,146,147,148,150,151,157,159,],[23,54,55,59,55,55,97,100,55,55,131,55,146,148,150,151,55,157,55,159,55,55,55,55,55,]),'iterador':([19,],[53,]),'elsif':([3,100,],[26,133,]),'math':([0,20,23,27,31,40,50,54,55,56,57,59,82,97,99,100,124,125,127,129,131,145,146,147,148,150,151,157,159,],[11,11,11,11,11,11,91,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'assign':([0,20,23,27,54,55,56,57,59,97,99,100,124,125,127,129,131,145,146,147,148,150,151,157,159,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'sterm':([0,20,23,27,31,40,54,55,56,57,59,82,97,99,100,110,124,125,127,129,131,145,146,147,148,150,151,157,159,],[13,13,13,13,67,13,13,13,13,13,13,13,13,13,13,142,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'defarray':([62,134,136,137,138,139,],[103,152,153,154,155,156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> expr','code',1,'p_code','gramarRuby.py',8),
  ('code -> if','code',1,'p_code','gramarRuby.py',9),
  ('code -> while','code',1,'p_code','gramarRuby.py',10),
  ('code -> expresiones','code',1,'p_code','gramarRuby.py',11),
  ('code -> for','code',1,'p_code','gramarRuby.py',12),
  ('code -> assign','code',1,'p_code','gramarRuby.py',13),
  ('code -> code code','code',2,'p_code','gramarRuby.py',14),
  ('while -> WHILE logical code END','while',4,'p_while','gramarRuby.py',20),
  ('while -> WHILE logical DO salto code salto END','while',7,'p_while','gramarRuby.py',21),
  ('while -> WHILE logical DOBLEPOINT salto code salto END','while',7,'p_while','gramarRuby.py',22),
  ('while -> BEGIN code END WHILE logical','while',5,'p_while','gramarRuby.py',23),
  ('logical -> term comparison term','logical',3,'p_logical','gramarRuby.py',32),
  ('logical -> term comparison logical','logical',3,'p_logical','gramarRuby.py',33),
  ('logical -> variable comparison term','logical',3,'p_logical','gramarRuby.py',34),
  ('logical -> variable comparison boolean','logical',3,'p_logical','gramarRuby.py',35),
  ('logical -> logical logcompare logical','logical',3,'p_logical','gramarRuby.py',36),
  ('logical -> boolean','logical',1,'p_logical','gramarRuby.py',37),
  ('comparison -> EQUAL','comparison',1,'p_comparison','gramarRuby.py',45),
  ('comparison -> NOTEQ','comparison',1,'p_comparison','gramarRuby.py',46),
  ('comparison -> GREATHER','comparison',1,'p_comparison','gramarRuby.py',47),
  ('comparison -> LOWER','comparison',1,'p_comparison','gramarRuby.py',48),
  ('comparison -> GREATHEREQ','comparison',1,'p_comparison','gramarRuby.py',49),
  ('comparison -> LOWEREQ','comparison',1,'p_comparison','gramarRuby.py',50),
  ('logcompare -> ANDLOG','logcompare',1,'p_logcompare','gramarRuby.py',54),
  ('logcompare -> ORLOG','logcompare',1,'p_logcompare','gramarRuby.py',55),
  ('logcompare -> NOTLOG','logcompare',1,'p_logcompare','gramarRuby.py',56),
  ('logcompare -> AND','logcompare',1,'p_logcompare','gramarRuby.py',57),
  ('logcompare -> OR','logcompare',1,'p_logcompare','gramarRuby.py',58),
  ('logcompare -> NOT','logcompare',1,'p_logcompare','gramarRuby.py',59),
  ('assign -> variable ASS expr','assign',3,'p_assign','gramarRuby.py',63),
  ('assign -> variable ASS sexpr','assign',3,'p_assign','gramarRuby.py',64),
  ('assign -> variable ASS array','assign',3,'p_assign','gramarRuby.py',65),
  ('math -> term arith term','math',3,'p_math','gramarRuby.py',70),
  ('math -> term arith math','math',3,'p_math','gramarRuby.py',71),
  ('math -> variable asig term','math',3,'p_math','gramarRuby.py',72),
  ('variable -> LOCAL','variable',1,'p_variable','gramarRuby.py',77),
  ('variable -> GLOBAL','variable',1,'p_variable','gramarRuby.py',78),
  ('variable -> CONSTANTS','variable',1,'p_variable','gramarRuby.py',79),
  ('variable -> INSTANCEVAR','variable',1,'p_variable','gramarRuby.py',80),
  ('variable -> CLASSVAR','variable',1,'p_variable','gramarRuby.py',81),
  ('asig -> ASS','asig',1,'p_asig','gramarRuby.py',85),
  ('asig -> ADDASS','asig',1,'p_asig','gramarRuby.py',86),
  ('asig -> SUBASS','asig',1,'p_asig','gramarRuby.py',87),
  ('asig -> MULASS','asig',1,'p_asig','gramarRuby.py',88),
  ('asig -> DIVASS','asig',1,'p_asig','gramarRuby.py',89),
  ('asig -> MODASS','asig',1,'p_asig','gramarRuby.py',90),
  ('asig -> EXPASS','asig',1,'p_asig','gramarRuby.py',91),
  ('expr -> math','expr',1,'p_expr','gramarRuby.py',95),
  ('expr -> term','expr',1,'p_expr','gramarRuby.py',96),
  ('expr -> sterm','expr',1,'p_expr','gramarRuby.py',97),
  ('expr -> variable','expr',1,'p_expr','gramarRuby.py',98),
  ('expr -> slice','expr',1,'p_expr','gramarRuby.py',99),
  ('expr -> index','expr',1,'p_expr','gramarRuby.py',100),
  ('sexpr -> sterm MUL term','sexpr',3,'p_sexpr','gramarRuby.py',105),
  ('sexpr -> sterm ADD sexpr','sexpr',3,'p_sexpr','gramarRuby.py',106),
  ('term -> NUMBER','term',1,'p_term','gramarRuby.py',113),
  ('sterm -> STRING','sterm',1,'p_sterm','gramarRuby.py',117),
  ('arith -> EXP','arith',1,'p_arith','gramarRuby.py',121),
  ('arith -> MUL','arith',1,'p_arith','gramarRuby.py',122),
  ('arith -> DIV','arith',1,'p_arith','gramarRuby.py',123),
  ('arith -> MOD','arith',1,'p_arith','gramarRuby.py',124),
  ('arith -> ADD','arith',1,'p_arith','gramarRuby.py',125),
  ('arith -> SUB','arith',1,'p_arith','gramarRuby.py',126),
  ('for -> FOR iterador IN expresiones code END','for',6,'p_for','gramarRuby.py',130),
  ('for -> FOR iterador IN expresiones DO code END','for',7,'p_for','gramarRuby.py',131),
  ('for -> FOR iterador IN array code END','for',6,'p_for','gramarRuby.py',132),
  ('for -> FOR iterador IN array DO code END','for',7,'p_for','gramarRuby.py',133),
  ('salto -> NEWLINE','salto',1,'p_salto','gramarRuby.py',141),
  ('if -> IF logical expr END','if',4,'p_if','gramarRuby.py',147),
  ('if -> IF logical THEN expr END','if',5,'p_if','gramarRuby.py',148),
  ('if -> IF logical','if',2,'p_if','gramarRuby.py',149),
  ('if -> IF logical THEN','if',3,'p_if','gramarRuby.py',150),
  ('if -> if else','if',2,'p_if','gramarRuby.py',151),
  ('if -> if elsif END','if',3,'p_if','gramarRuby.py',152),
  ('else -> ELSE code END','else',3,'p_else','gramarRuby.py',163),
  ('elsif -> ELSIF logical final','elsif',3,'p_elsif','gramarRuby.py',167),
  ('final -> code','final',1,'p_final','gramarRuby.py',174),
  ('final -> THEN code','final',2,'p_final','gramarRuby.py',175),
  ('final -> code else','final',2,'p_final','gramarRuby.py',176),
  ('final -> code elsif','final',2,'p_final','gramarRuby.py',177),
  ('iterador -> variable','iterador',1,'p_iterador','gramarRuby.py',184),
  ('iterador -> variable COMA variable','iterador',3,'p_iterador','gramarRuby.py',185),
  ('expresiones -> term DOUBLESECUENCEPOINT term','expresiones',3,'p_expresiones','gramarRuby.py',192),
  ('array -> LBRACK defarray RBRACK','array',3,'p_array','gramarRuby.py',197),
  ('defarray -> NUMBER','defarray',1,'p_defarray','gramarRuby.py',201),
  ('defarray -> NUMBER COMA defarray','defarray',3,'p_defarray','gramarRuby.py',202),
  ('defarray -> STRING','defarray',1,'p_defarray','gramarRuby.py',203),
  ('defarray -> STRING COMA defarray','defarray',3,'p_defarray','gramarRuby.py',204),
  ('defarray -> INT','defarray',1,'p_defarray','gramarRuby.py',205),
  ('defarray -> INT COMA defarray','defarray',3,'p_defarray','gramarRuby.py',206),
  ('defarray -> FLOAT','defarray',1,'p_defarray','gramarRuby.py',207),
  ('defarray -> FLOAT COMA defarray','defarray',3,'p_defarray','gramarRuby.py',208),
  ('defarray -> boolean','defarray',1,'p_defarray','gramarRuby.py',209),
  ('defarray -> boolean COMA defarray','defarray',3,'p_defarray','gramarRuby.py',210),
  ('index -> variable LBRACK INT RBRACK','index',4,'p_index','gramarRuby.py',219),
  ('slice -> variable LBRACK defslice RBRACK','slice',4,'p_slice','gramarRuby.py',223),
  ('defslice -> INT DOBLEPOINT INT','defslice',3,'p_defslice','gramarRuby.py',227),
  ('defslice -> INT DOBLEPOINT','defslice',2,'p_defslice','gramarRuby.py',228),
  ('defslice -> DOBLEPOINT INT','defslice',2,'p_defslice','gramarRuby.py',229),
  ('boolean -> TRUE','boolean',1,'p_boolean','gramarRuby.py',239),
  ('boolean -> FALSE','boolean',1,'p_boolean','gramarRuby.py',240),
]
