
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ADDASS ALIAS AND ANDLOG ASS BEGIN BOOLEAN BREAK CASE CLASS CLASSVAR COMA CONSTANTS DEF DEFINED DIV DIVASS DO DOBLEPOINT DOUBLESECUENCEPOINT ELSE ELSIF END ENSURE EQUAL ERROR EXP EXPASS FALSE FILE FLOAT FOR GLOBAL GREATHER GREATHEREQ IF IN INSTANCEVAR INT LBRACK LINE LOCAL LOWER LOWEREQ MOD MODASS MODULE MUL MULASS NEXT NIL NOT NOTEQ NOTLOG NUMBER OR ORLOG PSEUDO RBRACK REDO RESCUE RETRY RETURN SELF STRING SUB SUBASS SUPER THEN TRUE UNDEF UNLESS UNTIL WHEN WHILE YIELDassign : variable ASS expr\n              | variable ASS sexprmath : term arith term\n            | term arith math\n            | variable asig termvariable : LOCAL\n                | GLOBAL \n                | CONSTANTS \n                | INSTANCEVAR \n                | CLASSVARasig : ASS\n            | ADDASS\n            | SUBASS\n            | MULASS\n            | DIVASS\n            | MODASS\n            | EXPASSexpr :  expr arith term\n             | term\n             | variable\n             | assignsexpr : sterm MUL term\n             | sterm ADD sexpr\n             | stermterm : NUMBERsterm : STRINGarith : EXP\n             | MUL\n             | DIV\n             | MOD\n             | ADD\n             | SUBlogic : variable comparison variable\n             | variable EQUAL BOOLEAN\n             | variable comparison term\n             | variable comparison sterm\n             | logic logcompare logic\n             | logic logcompare BOOLEAN\n             | BOOLEAN logcompare BOOLEAN\n             | BOOLEAN logcompare logic\n             | term comparison variable\n             | sterm comparison variable\n             comparison : EQUAL\n                  | NOTEQ\n                  | GREATHER\n                  | LOWER\n                  | GREATHEREQ\n                  | LOWEREQlogcompare : ANDLOG\n                  | ORLOG\n                  | NOTLOG\n                  | AND\n                  | OR\n                  | NOTsalto : \n if : IF logic salto expr salto\n          | IF logic THEN salto expr salto\n          | if END\n          | if else END\n          | if elsif ENDelse : ELSE salto expr salto elsif : ELSIF logic salto expr salto\n             | ELSIF logic THEN salto expr salto\n             | elsif elsif\n             | elsif elsecode : expr\n            | ifwhile : WHILE logic salto code salto END\n             | WHILE logic DO salto code END\n             | WHILE  logic DOBLEPOINT code END\n             | BEGIN salto code END WHILE logiciterador : variable\n                | variable "," variableexpresiones : term DOUBLESECUENCEPOINT termfor : FOR iterador IN expresiones salto code salto END\n           | FOR iterador IN expresiones DO salto code salto END\n           | FOR iterador IN array salto code salto END\n           | FOR iterador IN array DO salto code salto ENDarray : LBRACK defarray RBRACKdefarray : NUMBER \n                | NUMBER COMA defarray\n                | STRING\n                | STRING COMA defarray\n                | INT\n                | INT COMA defarray\n                | FLOAT\n                | FLOAT COMA defarray\n                | BOOLEAN\n                | BOOLEAN COMA defarrayassarray : variable ASS array\n                | arrayindex : variable LBRACK INT RBRACKslice : variable LBRACK defslice RBRACKdefslice : INT DOBLEPOINT INT\n                    | INT DOBLEPOINT\n                    | DOBLEPOINT INT'
    
_lr_action_items = {'LOCAL':([0,8,],[3,3,]),'GLOBAL':([0,8,],[4,4,]),'CONSTANTS':([0,8,],[5,5,]),'INSTANCEVAR':([0,8,],[6,6,]),'CLASSVAR':([0,8,],[7,7,]),'$end':([1,3,4,5,6,7,9,10,11,12,13,14,15,16,26,27,28,],[0,-6,-7,-8,-9,-10,-20,-1,-2,-19,-21,-24,-25,-26,-18,-22,-23,]),'ASS':([2,3,4,5,6,7,9,],[8,-6,-7,-8,-9,-10,8,]),'EXP':([3,4,5,6,7,9,10,11,12,13,14,15,16,26,27,28,],[-6,-7,-8,-9,-10,-20,18,-2,-19,-21,-24,-25,-26,-18,-22,-23,]),'MUL':([3,4,5,6,7,9,10,11,12,13,14,15,16,26,27,28,],[-6,-7,-8,-9,-10,-20,19,-2,-19,-21,24,-25,-26,-18,-22,-23,]),'DIV':([3,4,5,6,7,9,10,11,12,13,14,15,16,26,27,28,],[-6,-7,-8,-9,-10,-20,20,-2,-19,-21,-24,-25,-26,-18,-22,-23,]),'MOD':([3,4,5,6,7,9,10,11,12,13,14,15,16,26,27,28,],[-6,-7,-8,-9,-10,-20,21,-2,-19,-21,-24,-25,-26,-18,-22,-23,]),'ADD':([3,4,5,6,7,9,10,11,12,13,14,15,16,26,27,28,],[-6,-7,-8,-9,-10,-20,22,-2,-19,-21,25,-25,-26,-18,-22,-23,]),'SUB':([3,4,5,6,7,9,10,11,12,13,14,15,16,26,27,28,],[-6,-7,-8,-9,-10,-20,23,-2,-19,-21,-24,-25,-26,-18,-22,-23,]),'NUMBER':([8,17,18,19,20,21,22,23,24,],[15,15,-27,-28,-29,-30,-31,-32,15,]),'STRING':([8,25,],[16,16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assign':([0,8,],[1,13,]),'variable':([0,8,],[2,9,]),'expr':([8,],[10,]),'sexpr':([8,25,],[11,28,]),'term':([8,17,24,],[12,26,27,]),'sterm':([8,25,],[14,14,]),'arith':([10,],[17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> assign","S'",1,None,None,None),
  ('assign -> variable ASS expr','assign',3,'p_assign','gramarRuby.py',9),
  ('assign -> variable ASS sexpr','assign',3,'p_assign','gramarRuby.py',10),
  ('math -> term arith term','math',3,'p_math','gramarRuby.py',13),
  ('math -> term arith math','math',3,'p_math','gramarRuby.py',14),
  ('math -> variable asig term','math',3,'p_math','gramarRuby.py',15),
  ('variable -> LOCAL','variable',1,'p_variable','gramarRuby.py',18),
  ('variable -> GLOBAL','variable',1,'p_variable','gramarRuby.py',19),
  ('variable -> CONSTANTS','variable',1,'p_variable','gramarRuby.py',20),
  ('variable -> INSTANCEVAR','variable',1,'p_variable','gramarRuby.py',21),
  ('variable -> CLASSVAR','variable',1,'p_variable','gramarRuby.py',22),
  ('asig -> ASS','asig',1,'p_asig','gramarRuby.py',25),
  ('asig -> ADDASS','asig',1,'p_asig','gramarRuby.py',26),
  ('asig -> SUBASS','asig',1,'p_asig','gramarRuby.py',27),
  ('asig -> MULASS','asig',1,'p_asig','gramarRuby.py',28),
  ('asig -> DIVASS','asig',1,'p_asig','gramarRuby.py',29),
  ('asig -> MODASS','asig',1,'p_asig','gramarRuby.py',30),
  ('asig -> EXPASS','asig',1,'p_asig','gramarRuby.py',31),
  ('expr -> expr arith term','expr',3,'p_expr','gramarRuby.py',34),
  ('expr -> term','expr',1,'p_expr','gramarRuby.py',35),
  ('expr -> variable','expr',1,'p_expr','gramarRuby.py',36),
  ('expr -> assign','expr',1,'p_expr','gramarRuby.py',37),
  ('sexpr -> sterm MUL term','sexpr',3,'p_sexpr','gramarRuby.py',40),
  ('sexpr -> sterm ADD sexpr','sexpr',3,'p_sexpr','gramarRuby.py',41),
  ('sexpr -> sterm','sexpr',1,'p_sexpr','gramarRuby.py',42),
  ('term -> NUMBER','term',1,'p_term','gramarRuby.py',45),
  ('sterm -> STRING','sterm',1,'p_sterm','gramarRuby.py',48),
  ('arith -> EXP','arith',1,'p_arith','gramarRuby.py',51),
  ('arith -> MUL','arith',1,'p_arith','gramarRuby.py',52),
  ('arith -> DIV','arith',1,'p_arith','gramarRuby.py',53),
  ('arith -> MOD','arith',1,'p_arith','gramarRuby.py',54),
  ('arith -> ADD','arith',1,'p_arith','gramarRuby.py',55),
  ('arith -> SUB','arith',1,'p_arith','gramarRuby.py',56),
  ('logic -> variable comparison variable','logic',3,'p_logic','gramarRuby.py',59),
  ('logic -> variable EQUAL BOOLEAN','logic',3,'p_logic','gramarRuby.py',60),
  ('logic -> variable comparison term','logic',3,'p_logic','gramarRuby.py',61),
  ('logic -> variable comparison sterm','logic',3,'p_logic','gramarRuby.py',62),
  ('logic -> logic logcompare logic','logic',3,'p_logic','gramarRuby.py',63),
  ('logic -> logic logcompare BOOLEAN','logic',3,'p_logic','gramarRuby.py',64),
  ('logic -> BOOLEAN logcompare BOOLEAN','logic',3,'p_logic','gramarRuby.py',65),
  ('logic -> BOOLEAN logcompare logic','logic',3,'p_logic','gramarRuby.py',66),
  ('logic -> term comparison variable','logic',3,'p_logic','gramarRuby.py',67),
  ('logic -> sterm comparison variable','logic',3,'p_logic','gramarRuby.py',68),
  ('comparison -> EQUAL','comparison',1,'p_comparison','gramarRuby.py',72),
  ('comparison -> NOTEQ','comparison',1,'p_comparison','gramarRuby.py',73),
  ('comparison -> GREATHER','comparison',1,'p_comparison','gramarRuby.py',74),
  ('comparison -> LOWER','comparison',1,'p_comparison','gramarRuby.py',75),
  ('comparison -> GREATHEREQ','comparison',1,'p_comparison','gramarRuby.py',76),
  ('comparison -> LOWEREQ','comparison',1,'p_comparison','gramarRuby.py',77),
  ('logcompare -> ANDLOG','logcompare',1,'p_logcompare','gramarRuby.py',80),
  ('logcompare -> ORLOG','logcompare',1,'p_logcompare','gramarRuby.py',81),
  ('logcompare -> NOTLOG','logcompare',1,'p_logcompare','gramarRuby.py',82),
  ('logcompare -> AND','logcompare',1,'p_logcompare','gramarRuby.py',83),
  ('logcompare -> OR','logcompare',1,'p_logcompare','gramarRuby.py',84),
  ('logcompare -> NOT','logcompare',1,'p_logcompare','gramarRuby.py',85),
  ('salto -> <empty>','salto',0,'p_salto','gramarRuby.py',91),
  ('if -> IF logic salto expr salto','if',5,'p_if','gramarRuby.py',95),
  ('if -> IF logic THEN salto expr salto','if',6,'p_if','gramarRuby.py',96),
  ('if -> if END','if',2,'p_if','gramarRuby.py',97),
  ('if -> if else END','if',3,'p_if','gramarRuby.py',98),
  ('if -> if elsif END','if',3,'p_if','gramarRuby.py',99),
  ('else -> ELSE salto expr salto','else',4,'p_else','gramarRuby.py',101),
  ('elsif -> ELSIF logic salto expr salto','elsif',5,'p_elsif','gramarRuby.py',103),
  ('elsif -> ELSIF logic THEN salto expr salto','elsif',6,'p_elsif','gramarRuby.py',104),
  ('elsif -> elsif elsif','elsif',2,'p_elsif','gramarRuby.py',105),
  ('elsif -> elsif else','elsif',2,'p_elsif','gramarRuby.py',106),
  ('code -> expr','code',1,'p_code','gramarRuby.py',108),
  ('code -> if','code',1,'p_code','gramarRuby.py',109),
  ('while -> WHILE logic salto code salto END','while',6,'p_while','gramarRuby.py',117),
  ('while -> WHILE logic DO salto code END','while',6,'p_while','gramarRuby.py',118),
  ('while -> WHILE logic DOBLEPOINT code END','while',5,'p_while','gramarRuby.py',119),
  ('while -> BEGIN salto code END WHILE logic','while',6,'p_while','gramarRuby.py',120),
  ('iterador -> variable','iterador',1,'p_iterador','gramarRuby.py',122),
  ('iterador -> variable , variable','iterador',3,'p_iterador','gramarRuby.py',123),
  ('expresiones -> term DOUBLESECUENCEPOINT term','expresiones',3,'p_expresiones','gramarRuby.py',125),
  ('for -> FOR iterador IN expresiones salto code salto END','for',8,'p_for','gramarRuby.py',127),
  ('for -> FOR iterador IN expresiones DO salto code salto END','for',9,'p_for','gramarRuby.py',128),
  ('for -> FOR iterador IN array salto code salto END','for',8,'p_for','gramarRuby.py',129),
  ('for -> FOR iterador IN array DO salto code salto END','for',9,'p_for','gramarRuby.py',130),
  ('array -> LBRACK defarray RBRACK','array',3,'p_array','gramarRuby.py',133),
  ('defarray -> NUMBER','defarray',1,'p_defarray','gramarRuby.py',136),
  ('defarray -> NUMBER COMA defarray','defarray',3,'p_defarray','gramarRuby.py',137),
  ('defarray -> STRING','defarray',1,'p_defarray','gramarRuby.py',138),
  ('defarray -> STRING COMA defarray','defarray',3,'p_defarray','gramarRuby.py',139),
  ('defarray -> INT','defarray',1,'p_defarray','gramarRuby.py',140),
  ('defarray -> INT COMA defarray','defarray',3,'p_defarray','gramarRuby.py',141),
  ('defarray -> FLOAT','defarray',1,'p_defarray','gramarRuby.py',142),
  ('defarray -> FLOAT COMA defarray','defarray',3,'p_defarray','gramarRuby.py',143),
  ('defarray -> BOOLEAN','defarray',1,'p_defarray','gramarRuby.py',144),
  ('defarray -> BOOLEAN COMA defarray','defarray',3,'p_defarray','gramarRuby.py',145),
  ('assarray -> variable ASS array','assarray',3,'p_assarray','gramarRuby.py',148),
  ('assarray -> array','assarray',1,'p_assarray','gramarRuby.py',149),
  ('index -> variable LBRACK INT RBRACK','index',4,'p_index','gramarRuby.py',152),
  ('slice -> variable LBRACK defslice RBRACK','slice',4,'p_slice','gramarRuby.py',155),
  ('defslice -> INT DOBLEPOINT INT','defslice',3,'p_defslice','gramarRuby.py',158),
  ('defslice -> INT DOBLEPOINT','defslice',2,'p_defslice','gramarRuby.py',159),
  ('defslice -> DOBLEPOINT INT','defslice',2,'p_defslice','gramarRuby.py',160),
]
