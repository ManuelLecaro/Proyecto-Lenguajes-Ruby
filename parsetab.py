
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ADDASS ALIAS AND ANDLOG ASS BEGIN BOOLEAN BREAK CASE CLASS CLASSVAR COMA CONSTANTS DEF DEFINED DIV DIVASS DO DOBLEPOINT DOUBLESECUENCEPOINT ELSE ELSIF END ENSURE EQUAL ERROR EXP EXPASS FALSE FILE FLOAT FOR GLOBAL GREATHER GREATHEREQ IF IN INSTANCEVAR INT LBRACK LINE LOCAL LOWER LOWEREQ MOD MODASS MODULE MUL MULASS NEWLINE NEXT NIL NOT NOTEQ NOTLOG NUMBER OR ORLOG PSEUDO RBRACK REDO RESCUE RETRY RETURN SELF STRING SUB SUBASS SUPER THEN TRUE UNDEF UNLESS UNTIL WHEN WHILE YIELDcode : expr\n            | if\n            | while\n            | expresiones\n            | for\n            | assign\n            | code codewhile : WHILE logical code END\n             | WHILE logical DO salto code salto END\n             | WHILE logical DOBLEPOINT salto code salto END\n             | BEGIN code END WHILE logicallogical : term comparison term\n               | term comparison logical\n               | variable comparison term\n               | variable comparison BOOLEAN\n               | logical logcompare logical\n               | BOOLEANcomparison : EQUAL\n                  | NOTEQ\n                  | GREATHER\n                  | LOWER\n                  | GREATHEREQ\n                  | LOWEREQlogcompare : ANDLOG\n                  | ORLOG\n                  | NOTLOG\n                  | AND\n                  | OR\n                  | NOTassign : variable ASS expr\n              | variable ASS sexpr\n              | variable ASS arraymath : term arith term\n            | term arith math\n            | variable asig termvariable : LOCAL\n                | GLOBAL \n                | CONSTANTS \n                | INSTANCEVAR \n                | CLASSVARasig : ASS\n            | ADDASS\n            | SUBASS\n            | MULASS\n            | DIVASS\n            | MODASS\n            | EXPASSexpr :  math\n             | term\n             | sterm\n             | variable\n             | slice\n             | indexsexpr : sterm MUL term\n             | sterm ADD sexprterm : NUMBERsterm : STRINGarith : EXP\n             | MUL\n             | DIV\n             | MOD\n             | ADD\n             | SUBfor : FOR iterador IN expresiones code END\n           | FOR iterador IN expresiones DO code END\n           | FOR iterador IN array code END\n           | FOR iterador IN array DO code ENDsalto : NEWLINE if : IF logical expr END\n          | IF logical THEN expr END\n          | IF logical\n          | IF logical THEN\n          | if else\n          | if elsif ENDelse : ELSE code ENDelsif : ELSIF logical finalfinal : code\n             | THEN code\n             | code else\n             | code elsif iterador : variable\n                | variable COMA variableexpresiones : term DOUBLESECUENCEPOINT termarray : LBRACK defarray RBRACKdefarray : NUMBER \n                | NUMBER COMA defarray\n                | STRING\n                | STRING COMA defarray\n                | INT\n                | INT COMA defarray\n                | FLOAT\n                | FLOAT COMA defarray\n                | BOOLEAN\n                | BOOLEAN COMA defarrayindex : variable LBRACK INT RBRACKslice : variable LBRACK defslice RBRACKdefslice : INT DOBLEPOINT INT\n                    | INT DOBLEPOINT\n                    | DOBLEPOINT INT'
    
_lr_action_items = {'IF':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,18,19,20,21,22,23,24,25,26,28,47,50,51,52,55,56,57,58,59,60,62,63,64,65,66,67,69,74,90,96,98,99,109,110,113,115,116,117,118,119,120,121,122,123,125,126,131,132,134,135,142,143,144,145,146,147,148,149,157,158,159,160,161,162,163,164,],[14,14,-1,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,14,-56,-57,-36,-37,-38,-39,-40,14,-73,14,-71,-17,14,14,-74,14,14,-83,-33,-34,-51,-30,-31,-32,-49,-50,-35,-72,14,-75,14,14,-96,-95,-69,-16,-12,-13,-14,-15,-8,14,-68,14,14,14,14,-54,-55,-84,-70,14,14,-11,14,14,14,14,-64,14,-66,14,-9,-10,-65,-67,]),'WHILE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,18,19,20,21,22,23,24,25,26,28,47,50,51,52,55,56,57,58,59,60,62,63,64,65,66,67,69,74,90,93,96,98,99,109,110,113,115,116,117,118,119,120,121,122,123,125,126,131,132,134,135,142,143,144,145,146,147,148,149,157,158,159,160,161,162,163,164,],[15,15,-1,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,15,-56,-57,-36,-37,-38,-39,-40,15,-73,15,-71,-17,15,15,-74,15,15,-83,-33,-34,-51,-30,-31,-32,-49,-50,-35,-72,15,124,-75,15,15,-96,-95,-69,-16,-12,-13,-14,-15,-8,15,-68,15,15,15,15,-54,-55,-84,-70,15,15,-11,15,15,15,15,-64,15,-66,15,-9,-10,-65,-67,]),'BEGIN':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,18,19,20,21,22,23,24,25,26,28,47,50,51,52,55,56,57,58,59,60,62,63,64,65,66,67,69,74,90,96,98,99,109,110,113,115,116,117,118,119,120,121,122,123,125,126,131,132,134,135,142,143,144,145,146,147,148,149,157,158,159,160,161,162,163,164,],[16,16,-1,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,16,-56,-57,-36,-37,-38,-39,-40,16,-73,16,-71,-17,16,16,-74,16,16,-83,-33,-34,-51,-30,-31,-32,-49,-50,-35,-72,16,-75,16,16,-96,-95,-69,-16,-12,-13,-14,-15,-8,16,-68,16,16,16,16,-54,-55,-84,-70,16,16,-11,16,16,16,16,-64,16,-66,16,-9,-10,-65,-67,]),'FOR':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,18,19,20,21,22,23,24,25,26,28,47,50,51,52,55,56,57,58,59,60,62,63,64,65,66,67,69,74,90,96,98,99,109,110,113,115,116,117,118,119,120,121,122,123,125,126,131,132,134,135,142,143,144,145,146,147,148,149,157,158,159,160,161,162,163,164,],[17,17,-1,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,17,-56,-57,-36,-37,-38,-39,-40,17,-73,17,-71,-17,17,17,-74,17,17,-83,-33,-34,-51,-30,-31,-32,-49,-50,-35,-72,17,-75,17,17,-96,-95,-69,-16,-12,-13,-14,-15,-8,17,-68,17,17,17,17,-54,-55,-84,-70,17,17,-11,17,17,17,17,-64,17,-66,17,-9,-10,-65,-67,]),'NUMBER':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,50,51,52,55,56,57,58,59,60,62,63,64,65,66,67,68,69,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,94,96,98,99,100,101,109,110,113,115,116,117,118,119,120,121,122,123,124,125,126,131,132,134,135,136,137,138,139,140,142,143,144,145,146,147,148,149,157,158,159,160,161,162,163,164,],[18,18,-1,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,18,18,18,-56,-57,-36,-37,-38,-39,-40,18,-73,18,18,18,18,-58,-59,-60,-61,-62,-63,18,18,-42,-43,-44,-45,-46,-47,18,-17,18,18,-74,18,18,-83,-33,-34,-51,-30,-31,-32,-49,-50,104,-35,18,18,-24,-25,-26,-27,-28,-29,18,-18,-19,-20,-21,-22,-23,18,18,18,-75,18,18,-41,18,-96,-95,-69,-16,-12,-13,-14,-15,-8,18,-68,18,18,18,18,18,-54,-55,-84,104,104,104,104,104,-70,18,18,-11,18,18,18,18,-64,18,-66,18,-9,-10,-65,-67,]),'STRING':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,18,19,20,21,22,23,24,25,26,28,38,47,50,51,52,55,56,57,58,59,60,62,63,64,65,66,67,68,69,74,90,96,98,99,102,109,110,113,115,116,117,118,119,120,121,122,123,125,126,131,132,134,135,136,137,138,139,140,142,143,144,145,146,147,148,149,157,158,159,160,161,162,163,164,],[19,19,-1,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,19,-56,-57,-36,-37,-38,-39,-40,19,-73,19,19,19,-17,19,19,-74,19,19,-83,-33,-34,-51,-30,-31,-32,-49,-50,105,-35,19,19,-75,19,19,19,-96,-95,-69,-16,-12,-13,-14,-15,-8,19,-68,19,19,19,19,-54,-55,-84,105,105,105,105,105,-70,19,19,-11,19,19,19,19,-64,19,-66,19,-9,-10,-65,-67,]),'LOCAL':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,47,50,51,52,55,56,57,58,59,60,62,63,64,65,66,67,69,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,95,96,98,99,109,110,113,115,116,117,118,119,120,121,122,123,124,125,126,131,132,134,135,142,143,144,145,146,147,148,149,157,158,159,160,161,162,163,164,],[20,20,-1,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,20,20,20,20,-56,-57,-36,-37,-38,-39,-40,20,-73,20,20,20,-58,-59,-60,-61,-62,-63,20,20,-17,20,20,-74,20,20,-83,-33,-34,-51,-30,-31,-32,-49,-50,-35,20,20,-24,-25,-26,-27,-28,-29,20,-18,-19,-20,-21,-22,-23,20,20,-75,20,20,-96,-95,-69,-16,-12,-13,-14,-15,-8,20,-68,20,20,20,20,20,-54,-55,-84,-70,20,20,-11,20,20,20,20,-64,20,-66,20,-9,-10,-65,-67,]),'GLOBAL':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,47,50,51,52,55,56,57,58,59,60,62,63,64,65,66,67,69,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,95,96,98,99,109,110,113,115,116,117,118,119,120,121,122,123,124,125,126,131,132,134,135,142,143,144,145,146,147,148,149,157,158,159,160,161,162,163,164,],[21,21,-1,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,21,21,21,21,-56,-57,-36,-37,-38,-39,-40,21,-73,21,21,21,-58,-59,-60,-61,-62,-63,21,21,-17,21,21,-74,21,21,-83,-33,-34,-51,-30,-31,-32,-49,-50,-35,21,21,-24,-25,-26,-27,-28,-29,21,-18,-19,-20,-21,-22,-23,21,21,-75,21,21,-96,-95,-69,-16,-12,-13,-14,-15,-8,21,-68,21,21,21,21,21,-54,-55,-84,-70,21,21,-11,21,21,21,21,-64,21,-66,21,-9,-10,-65,-67,]),'CONSTANTS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,47,50,51,52,55,56,57,58,59,60,62,63,64,65,66,67,69,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,95,96,98,99,109,110,113,115,116,117,118,119,120,121,122,123,124,125,126,131,132,134,135,142,143,144,145,146,147,148,149,157,158,159,160,161,162,163,164,],[22,22,-1,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,22,22,22,22,-56,-57,-36,-37,-38,-39,-40,22,-73,22,22,22,-58,-59,-60,-61,-62,-63,22,22,-17,22,22,-74,22,22,-83,-33,-34,-51,-30,-31,-32,-49,-50,-35,22,22,-24,-25,-26,-27,-28,-29,22,-18,-19,-20,-21,-22,-23,22,22,-75,22,22,-96,-95,-69,-16,-12,-13,-14,-15,-8,22,-68,22,22,22,22,22,-54,-55,-84,-70,22,22,-11,22,22,22,22,-64,22,-66,22,-9,-10,-65,-67,]),'INSTANCEVAR':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,47,50,51,52,55,56,57,58,59,60,62,63,64,65,66,67,69,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,95,96,98,99,109,110,113,115,116,117,118,119,120,121,122,123,124,125,126,131,132,134,135,142,143,144,145,146,147,148,149,157,158,159,160,161,162,163,164,],[23,23,-1,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,23,23,23,23,-56,-57,-36,-37,-38,-39,-40,23,-73,23,23,23,-58,-59,-60,-61,-62,-63,23,23,-17,23,23,-74,23,23,-83,-33,-34,-51,-30,-31,-32,-49,-50,-35,23,23,-24,-25,-26,-27,-28,-29,23,-18,-19,-20,-21,-22,-23,23,23,-75,23,23,-96,-95,-69,-16,-12,-13,-14,-15,-8,23,-68,23,23,23,23,23,-54,-55,-84,-70,23,23,-11,23,23,23,23,-64,23,-66,23,-9,-10,-65,-67,]),'CLASSVAR':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,47,50,51,52,55,56,57,58,59,60,62,63,64,65,66,67,69,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,95,96,98,99,109,110,113,115,116,117,118,119,120,121,122,123,124,125,126,131,132,134,135,142,143,144,145,146,147,148,149,157,158,159,160,161,162,163,164,],[24,24,-1,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,24,24,24,24,-56,-57,-36,-37,-38,-39,-40,24,-73,24,24,24,-58,-59,-60,-61,-62,-63,24,24,-17,24,24,-74,24,24,-83,-33,-34,-51,-30,-31,-32,-49,-50,-35,24,24,-24,-25,-26,-27,-28,-29,24,-18,-19,-20,-21,-22,-23,24,24,-75,24,24,-96,-95,-69,-16,-12,-13,-14,-15,-8,24,-68,24,24,24,24,24,-54,-55,-84,-70,24,24,-11,24,24,24,24,-64,24,-66,24,-9,-10,-65,-67,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,18,19,20,21,22,23,24,25,26,47,50,55,58,59,60,62,63,64,65,66,67,69,74,96,109,110,113,115,116,117,118,119,120,132,134,135,142,145,157,159,161,162,163,164,],[0,-1,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,-56,-57,-36,-37,-38,-39,-40,-7,-73,-71,-17,-74,-83,-33,-34,-51,-30,-31,-32,-49,-50,-35,-72,-75,-96,-95,-69,-16,-12,-13,-14,-15,-8,-54,-55,-84,-70,-11,-64,-66,-9,-10,-65,-67,]),'END':([2,3,4,5,6,7,8,9,10,11,12,13,18,19,20,21,22,23,24,25,26,27,47,50,52,55,56,58,59,60,62,63,64,65,66,67,69,73,74,90,96,97,98,109,110,113,114,115,116,117,118,119,120,122,129,130,131,132,134,135,142,145,146,148,155,156,157,158,159,160,161,162,163,164,],[-1,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,-56,-57,-36,-37,-38,-39,-40,-7,-73,55,-71,-17,93,-74,96,-83,-33,-34,-51,-30,-31,-32,-49,-50,-35,113,-72,120,-75,-76,-77,-96,-95,-69,142,-16,-12,-13,-14,-15,-8,-68,-79,-80,-78,-54,-55,-84,-70,-11,157,159,161,162,-64,163,-66,164,-9,-10,-65,-67,]),'ELSE':([2,3,4,5,6,7,8,9,10,11,12,13,18,19,20,21,22,23,24,25,26,47,50,55,58,59,60,62,63,64,65,66,67,69,74,96,98,109,110,113,115,116,117,118,119,120,132,134,135,142,145,157,159,161,162,163,164,],[-1,28,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,-56,-57,-36,-37,-38,-39,-40,-7,-73,-71,-17,-74,-83,-33,-34,-51,-30,-31,-32,-49,-50,-35,-72,-75,28,-96,-95,-69,-16,-12,-13,-14,-15,-8,-54,-55,-84,-70,-11,-64,-66,-9,-10,-65,-67,]),'ELSIF':([2,3,4,5,6,7,8,9,10,11,12,13,18,19,20,21,22,23,24,25,26,47,50,55,58,59,60,62,63,64,65,66,67,69,74,96,98,109,110,113,115,116,117,118,119,120,132,134,135,142,145,157,159,161,162,163,164,],[-1,29,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,-56,-57,-36,-37,-38,-39,-40,-7,-73,-71,-17,-74,-83,-33,-34,-51,-30,-31,-32,-49,-50,-35,-72,-75,29,-96,-95,-69,-16,-12,-13,-14,-15,-8,-54,-55,-84,-70,-11,-64,-66,-9,-10,-65,-67,]),'NEWLINE':([2,3,4,5,6,7,8,9,10,11,12,13,18,19,20,21,22,23,24,25,26,47,50,55,58,59,60,62,63,64,65,66,67,69,74,91,92,96,109,110,113,115,116,117,118,119,120,132,134,135,142,143,144,145,157,159,161,162,163,164,],[-1,-2,-3,-4,-5,-6,-48,-49,-50,-51,-52,-53,-56,-57,-36,-37,-38,-39,-40,-7,-73,-71,-17,-74,-83,-33,-34,-51,-30,-31,-32,-49,-50,-35,-72,122,122,-75,-96,-95,-69,-16,-12,-13,-14,-15,-8,-54,-55,-84,-70,122,122,-11,-64,-66,-9,-10,-65,-67,]),'DOUBLESECUENCEPOINT':([9,18,127,],[30,-56,30,]),'EXP':([9,18,59,66,],[32,-56,32,32,]),'MUL':([9,18,19,59,66,67,133,],[33,-56,-57,33,33,101,101,]),'DIV':([9,18,59,66,],[34,-56,34,34,]),'MOD':([9,18,59,66,],[35,-56,35,35,]),'ADD':([9,18,19,59,66,67,133,],[36,-56,-57,36,36,102,102,]),'SUB':([9,18,59,66,],[37,-56,37,37,]),'ASS':([11,20,21,22,23,24,61,62,],[38,-36,-37,-38,-39,-40,100,100,]),'LBRACK':([11,20,21,22,23,24,38,62,94,],[40,-36,-37,-38,-39,-40,68,40,68,]),'ADDASS':([11,20,21,22,23,24,61,62,],[41,-36,-37,-38,-39,-40,41,41,]),'SUBASS':([11,20,21,22,23,24,61,62,],[42,-36,-37,-38,-39,-40,42,42,]),'MULASS':([11,20,21,22,23,24,61,62,],[43,-36,-37,-38,-39,-40,43,43,]),'DIVASS':([11,20,21,22,23,24,61,62,],[44,-36,-37,-38,-39,-40,44,44,]),'MODASS':([11,20,21,22,23,24,61,62,],[45,-36,-37,-38,-39,-40,45,45,]),'EXPASS':([11,20,21,22,23,24,61,62,],[46,-36,-37,-38,-39,-40,46,46,]),'BOOLEAN':([14,15,29,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,124,136,137,138,139,140,],[50,50,50,108,50,-24,-25,-26,-27,-28,-29,50,-18,-19,-20,-21,-22,-23,119,50,108,108,108,108,108,]),'EQUAL':([18,20,21,22,23,24,48,49,116,],[-56,-36,-37,-38,-39,-40,83,83,83,]),'NOTEQ':([18,20,21,22,23,24,48,49,116,],[-56,-36,-37,-38,-39,-40,84,84,84,]),'GREATHER':([18,20,21,22,23,24,48,49,116,],[-56,-36,-37,-38,-39,-40,85,85,85,]),'LOWER':([18,20,21,22,23,24,48,49,116,],[-56,-36,-37,-38,-39,-40,86,86,86,]),'GREATHEREQ':([18,20,21,22,23,24,48,49,116,],[-56,-36,-37,-38,-39,-40,87,87,87,]),'LOWEREQ':([18,20,21,22,23,24,48,49,116,],[-56,-36,-37,-38,-39,-40,88,88,88,]),'DO':([18,50,51,58,115,116,117,118,119,125,126,135,],[-56,-17,91,-83,-16,-12,-13,-14,-15,147,149,-84,]),'THEN':([18,47,50,57,115,116,117,118,119,],[-56,74,-17,99,-16,-12,-13,-14,-15,]),'ANDLOG':([18,47,50,51,57,115,116,117,118,119,145,],[-56,76,-17,76,76,76,-12,76,-14,-15,76,]),'ORLOG':([18,47,50,51,57,115,116,117,118,119,145,],[-56,77,-17,77,77,77,-12,77,-14,-15,77,]),'NOTLOG':([18,47,50,51,57,115,116,117,118,119,145,],[-56,78,-17,78,78,78,-12,78,-14,-15,78,]),'AND':([18,47,50,51,57,115,116,117,118,119,145,],[-56,79,-17,79,79,79,-12,79,-14,-15,79,]),'OR':([18,47,50,51,57,115,116,117,118,119,145,],[-56,80,-17,80,80,80,-12,80,-14,-15,80,]),'NOT':([18,47,50,51,57,115,116,117,118,119,145,],[-56,81,-17,81,81,81,-12,81,-14,-15,81,]),'DOBLEPOINT':([18,40,50,51,71,115,116,117,118,119,],[-56,72,-17,92,111,-16,-12,-13,-14,-15,]),'COMA':([20,21,22,23,24,54,104,105,106,107,108,],[-36,-37,-38,-39,-40,95,136,137,138,139,140,]),'IN':([20,21,22,23,24,53,54,128,],[-36,-37,-38,-39,-40,94,-81,-82,]),'INT':([40,68,72,111,136,137,138,139,140,],[71,106,112,141,106,106,106,106,106,]),'FLOAT':([68,136,137,138,139,140,],[107,107,107,107,107,107,]),'RBRACK':([70,71,103,104,105,106,107,108,111,112,141,150,151,152,153,154,],[109,110,135,-85,-87,-89,-91,-93,-98,-99,-97,-86,-88,-90,-92,-94,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,1,16,25,28,51,52,56,57,90,98,99,121,123,125,126,131,143,144,146,147,148,149,158,160,],[1,25,52,25,56,90,25,25,98,25,25,131,143,144,146,148,25,25,25,25,158,25,160,25,25,]),'expr':([0,1,16,25,28,38,47,51,52,56,57,74,90,98,99,121,123,125,126,131,143,144,146,147,148,149,158,160,],[2,2,2,2,2,63,73,2,2,2,2,114,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'if':([0,1,16,25,28,51,52,56,57,90,98,99,121,123,125,126,131,143,144,146,147,148,149,158,160,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'while':([0,1,16,25,28,51,52,56,57,90,98,99,121,123,125,126,131,143,144,146,147,148,149,158,160,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'expresiones':([0,1,16,25,28,51,52,56,57,90,94,98,99,121,123,125,126,131,143,144,146,147,148,149,158,160,],[5,5,5,5,5,5,5,5,5,5,125,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'for':([0,1,16,25,28,51,52,56,57,90,98,99,121,123,125,126,131,143,144,146,147,148,149,158,160,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'assign':([0,1,16,25,28,51,52,56,57,90,98,99,121,123,125,126,131,143,144,146,147,148,149,158,160,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'math':([0,1,16,25,28,31,38,47,51,52,56,57,74,90,98,99,121,123,125,126,131,143,144,146,147,148,149,158,160,],[8,8,8,8,8,60,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'term':([0,1,14,15,16,25,28,29,30,31,38,39,47,51,52,56,57,74,75,82,89,90,94,98,99,101,121,123,124,125,126,131,143,144,146,147,148,149,158,160,],[9,9,48,48,9,9,9,48,58,59,66,69,66,9,9,9,9,66,48,116,118,9,127,9,9,132,9,9,48,9,9,9,9,9,9,9,9,9,9,9,]),'sterm':([0,1,16,25,28,38,47,51,52,56,57,74,90,98,99,102,121,123,125,126,131,143,144,146,147,148,149,158,160,],[10,10,10,10,10,67,10,10,10,10,10,10,10,10,10,133,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'variable':([0,1,14,15,16,17,25,28,29,31,38,47,51,52,56,57,74,75,82,90,95,98,99,121,123,124,125,126,131,143,144,146,147,148,149,158,160,],[11,11,49,49,11,54,11,11,49,61,62,62,11,11,11,11,62,49,49,11,128,11,11,11,11,49,11,11,11,11,11,11,11,11,11,11,11,]),'slice':([0,1,16,25,28,38,47,51,52,56,57,74,90,98,99,121,123,125,126,131,143,144,146,147,148,149,158,160,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'index':([0,1,16,25,28,38,47,51,52,56,57,74,90,98,99,121,123,125,126,131,143,144,146,147,148,149,158,160,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'else':([3,98,],[26,129,]),'elsif':([3,98,],[27,130,]),'arith':([9,59,66,],[31,31,31,]),'asig':([11,61,62,],[39,39,39,]),'logical':([14,15,29,75,82,124,],[47,51,57,115,117,145,]),'iterador':([17,],[53,]),'sexpr':([38,102,],[64,134,]),'array':([38,94,],[65,126,]),'defslice':([40,],[70,]),'logcompare':([47,51,57,115,117,145,],[75,75,75,75,75,75,]),'comparison':([48,49,116,],[82,89,82,]),'final':([57,],[97,]),'defarray':([68,136,137,138,139,140,],[103,150,151,152,153,154,]),'salto':([91,92,143,144,],[121,123,155,156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> expr','code',1,'p_code','gramarRuby.py',8),
  ('code -> if','code',1,'p_code','gramarRuby.py',9),
  ('code -> while','code',1,'p_code','gramarRuby.py',10),
  ('code -> expresiones','code',1,'p_code','gramarRuby.py',11),
  ('code -> for','code',1,'p_code','gramarRuby.py',12),
  ('code -> assign','code',1,'p_code','gramarRuby.py',13),
  ('code -> code code','code',2,'p_code','gramarRuby.py',14),
  ('while -> WHILE logical code END','while',4,'p_while','gramarRuby.py',20),
  ('while -> WHILE logical DO salto code salto END','while',7,'p_while','gramarRuby.py',21),
  ('while -> WHILE logical DOBLEPOINT salto code salto END','while',7,'p_while','gramarRuby.py',22),
  ('while -> BEGIN code END WHILE logical','while',5,'p_while','gramarRuby.py',23),
  ('logical -> term comparison term','logical',3,'p_logical','gramarRuby.py',32),
  ('logical -> term comparison logical','logical',3,'p_logical','gramarRuby.py',33),
  ('logical -> variable comparison term','logical',3,'p_logical','gramarRuby.py',34),
  ('logical -> variable comparison BOOLEAN','logical',3,'p_logical','gramarRuby.py',35),
  ('logical -> logical logcompare logical','logical',3,'p_logical','gramarRuby.py',36),
  ('logical -> BOOLEAN','logical',1,'p_logical','gramarRuby.py',37),
  ('comparison -> EQUAL','comparison',1,'p_comparison','gramarRuby.py',45),
  ('comparison -> NOTEQ','comparison',1,'p_comparison','gramarRuby.py',46),
  ('comparison -> GREATHER','comparison',1,'p_comparison','gramarRuby.py',47),
  ('comparison -> LOWER','comparison',1,'p_comparison','gramarRuby.py',48),
  ('comparison -> GREATHEREQ','comparison',1,'p_comparison','gramarRuby.py',49),
  ('comparison -> LOWEREQ','comparison',1,'p_comparison','gramarRuby.py',50),
  ('logcompare -> ANDLOG','logcompare',1,'p_logcompare','gramarRuby.py',54),
  ('logcompare -> ORLOG','logcompare',1,'p_logcompare','gramarRuby.py',55),
  ('logcompare -> NOTLOG','logcompare',1,'p_logcompare','gramarRuby.py',56),
  ('logcompare -> AND','logcompare',1,'p_logcompare','gramarRuby.py',57),
  ('logcompare -> OR','logcompare',1,'p_logcompare','gramarRuby.py',58),
  ('logcompare -> NOT','logcompare',1,'p_logcompare','gramarRuby.py',59),
  ('assign -> variable ASS expr','assign',3,'p_assign','gramarRuby.py',63),
  ('assign -> variable ASS sexpr','assign',3,'p_assign','gramarRuby.py',64),
  ('assign -> variable ASS array','assign',3,'p_assign','gramarRuby.py',65),
  ('math -> term arith term','math',3,'p_math','gramarRuby.py',70),
  ('math -> term arith math','math',3,'p_math','gramarRuby.py',71),
  ('math -> variable asig term','math',3,'p_math','gramarRuby.py',72),
  ('variable -> LOCAL','variable',1,'p_variable','gramarRuby.py',77),
  ('variable -> GLOBAL','variable',1,'p_variable','gramarRuby.py',78),
  ('variable -> CONSTANTS','variable',1,'p_variable','gramarRuby.py',79),
  ('variable -> INSTANCEVAR','variable',1,'p_variable','gramarRuby.py',80),
  ('variable -> CLASSVAR','variable',1,'p_variable','gramarRuby.py',81),
  ('asig -> ASS','asig',1,'p_asig','gramarRuby.py',85),
  ('asig -> ADDASS','asig',1,'p_asig','gramarRuby.py',86),
  ('asig -> SUBASS','asig',1,'p_asig','gramarRuby.py',87),
  ('asig -> MULASS','asig',1,'p_asig','gramarRuby.py',88),
  ('asig -> DIVASS','asig',1,'p_asig','gramarRuby.py',89),
  ('asig -> MODASS','asig',1,'p_asig','gramarRuby.py',90),
  ('asig -> EXPASS','asig',1,'p_asig','gramarRuby.py',91),
  ('expr -> math','expr',1,'p_expr','gramarRuby.py',95),
  ('expr -> term','expr',1,'p_expr','gramarRuby.py',96),
  ('expr -> sterm','expr',1,'p_expr','gramarRuby.py',97),
  ('expr -> variable','expr',1,'p_expr','gramarRuby.py',98),
  ('expr -> slice','expr',1,'p_expr','gramarRuby.py',99),
  ('expr -> index','expr',1,'p_expr','gramarRuby.py',100),
  ('sexpr -> sterm MUL term','sexpr',3,'p_sexpr','gramarRuby.py',105),
  ('sexpr -> sterm ADD sexpr','sexpr',3,'p_sexpr','gramarRuby.py',106),
  ('term -> NUMBER','term',1,'p_term','gramarRuby.py',113),
  ('sterm -> STRING','sterm',1,'p_sterm','gramarRuby.py',117),
  ('arith -> EXP','arith',1,'p_arith','gramarRuby.py',121),
  ('arith -> MUL','arith',1,'p_arith','gramarRuby.py',122),
  ('arith -> DIV','arith',1,'p_arith','gramarRuby.py',123),
  ('arith -> MOD','arith',1,'p_arith','gramarRuby.py',124),
  ('arith -> ADD','arith',1,'p_arith','gramarRuby.py',125),
  ('arith -> SUB','arith',1,'p_arith','gramarRuby.py',126),
  ('for -> FOR iterador IN expresiones code END','for',6,'p_for','gramarRuby.py',130),
  ('for -> FOR iterador IN expresiones DO code END','for',7,'p_for','gramarRuby.py',131),
  ('for -> FOR iterador IN array code END','for',6,'p_for','gramarRuby.py',132),
  ('for -> FOR iterador IN array DO code END','for',7,'p_for','gramarRuby.py',133),
  ('salto -> NEWLINE','salto',1,'p_salto','gramarRuby.py',138),
  ('if -> IF logical expr END','if',4,'p_if','gramarRuby.py',144),
  ('if -> IF logical THEN expr END','if',5,'p_if','gramarRuby.py',145),
  ('if -> IF logical','if',2,'p_if','gramarRuby.py',146),
  ('if -> IF logical THEN','if',3,'p_if','gramarRuby.py',147),
  ('if -> if else','if',2,'p_if','gramarRuby.py',148),
  ('if -> if elsif END','if',3,'p_if','gramarRuby.py',149),
  ('else -> ELSE code END','else',3,'p_else','gramarRuby.py',160),
  ('elsif -> ELSIF logical final','elsif',3,'p_elsif','gramarRuby.py',164),
  ('final -> code','final',1,'p_final','gramarRuby.py',171),
  ('final -> THEN code','final',2,'p_final','gramarRuby.py',172),
  ('final -> code else','final',2,'p_final','gramarRuby.py',173),
  ('final -> code elsif','final',2,'p_final','gramarRuby.py',174),
  ('iterador -> variable','iterador',1,'p_iterador','gramarRuby.py',181),
  ('iterador -> variable COMA variable','iterador',3,'p_iterador','gramarRuby.py',182),
  ('expresiones -> term DOUBLESECUENCEPOINT term','expresiones',3,'p_expresiones','gramarRuby.py',186),
  ('array -> LBRACK defarray RBRACK','array',3,'p_array','gramarRuby.py',191),
  ('defarray -> NUMBER','defarray',1,'p_defarray','gramarRuby.py',195),
  ('defarray -> NUMBER COMA defarray','defarray',3,'p_defarray','gramarRuby.py',196),
  ('defarray -> STRING','defarray',1,'p_defarray','gramarRuby.py',197),
  ('defarray -> STRING COMA defarray','defarray',3,'p_defarray','gramarRuby.py',198),
  ('defarray -> INT','defarray',1,'p_defarray','gramarRuby.py',199),
  ('defarray -> INT COMA defarray','defarray',3,'p_defarray','gramarRuby.py',200),
  ('defarray -> FLOAT','defarray',1,'p_defarray','gramarRuby.py',201),
  ('defarray -> FLOAT COMA defarray','defarray',3,'p_defarray','gramarRuby.py',202),
  ('defarray -> BOOLEAN','defarray',1,'p_defarray','gramarRuby.py',203),
  ('defarray -> BOOLEAN COMA defarray','defarray',3,'p_defarray','gramarRuby.py',204),
  ('index -> variable LBRACK INT RBRACK','index',4,'p_index','gramarRuby.py',209),
  ('slice -> variable LBRACK defslice RBRACK','slice',4,'p_slice','gramarRuby.py',213),
  ('defslice -> INT DOBLEPOINT INT','defslice',3,'p_defslice','gramarRuby.py',217),
  ('defslice -> INT DOBLEPOINT','defslice',2,'p_defslice','gramarRuby.py',218),
  ('defslice -> DOBLEPOINT INT','defslice',2,'p_defslice','gramarRuby.py',219),
]
